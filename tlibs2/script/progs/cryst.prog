#
# crystallographic A & B matrices, B = 2pi * A^(-T)
# @author Tobias Weber <tweber@ill.fr>
# @date jul-2020
# @license GPLv3, see 'LICENSE' file
# @desc Forked on 18/July/2020 from my privately developed "matrix_calc" project (https://github.com/t-weber/matrix_calc).
#


#
# fractional crystal coordinates
# @see https://en.wikipedia.org/wiki/Fractional_coordinates
#
func mat 3 3 B_matrix(scalar a, scalar b, scalar c, scalar alpha, scalar beta, scalar gamma)
{
	scalar sc = sin(gamma);
	scalar ca = cos(alpha);
	scalar cb = cos(beta);
	scalar cc = cos(gamma);
	scalar rr = sqrt(1. + 2.*ca*cb*cc - (ca*ca + cb*cb + cc*cc));

	mat 3 3 B;
	B[0,0] = 1./a;				B[0,1] = 0.;				B[0,2] = 0.;
	B[1,0] = -1./a * cc/sc;			B[1,1] = 1./b * 1./sc;			B[1,2] = 0.;
	B[2,0] = (cc*ca - cb)/(a*sc*rr);	B[2,1] = (cb*cc-ca)/(b*sc*rr);		B[2,2] = sc/(c*rr);

	B = B*(2*pi);
	ret B;
}


func mat 3 3 rotate_z(scalar phi)
{
	scalar cos_phi = cos(phi);
	scalar sin_phi = sin(phi);

	mat 3 3 rot;
	rot[0,0] = +cos_phi;	rot[0,1] = -sin_phi;	rot[0,2]=0;
	rot[1,0] = +sin_phi;	rot[1,1] = +cos_phi;	rot[1,2]=0;
	rot[2,0] = 0;		rot[2,1] = 0;		rot[2,2]=1;

	ret rot;
}


#
# fractional crystal coordinates
# @see https://en.wikipedia.org/wiki/Fractional_coordinates
#
func mat 3 3 A_matrix(scalar a, scalar b, scalar c, scalar alpha, scalar beta, scalar gamma)
{
	mat 3 3 rot_z_gamma = rotate_z(gamma);

	#
	# define the va vector along x
	#
	vec 3 va = [a, 0, 0];

	#
	# rotate vb vector around the va vector in the xy plane
	#
	vec 3 vb = (rot_z_gamma * va) / a * b;

	#
	# angle between vc and va vector: va.vc/(a*c) = cos(beta)
	#	->  va[0]*vc[0]/(a*c) = cos(beta)
	#	->  vc[0] = cos(beta) * (a*c) / va[0]
	#	->  vc[0] = cos(beta) * c
	#
	# angle between vc and vb vector: vb.vc/(b*c) = cos(alpha)
	#	-> (vb[0]*vc[0] + vb[1]*vc[1]) = cos(alpha) * (b*c)
	#	-> vc[1] = (cos(alpha) * b*c - vb[0]*vc[0]) / vb[1]
	#
	# vc vector length: vc[0]^2 + vc[1]^2 + vc[2]^2 = c^2
	#	-> vc[2]^2 = c^2 - vc[0]^2 - vc[1]^2
	#
	vec 3 vc;
	vc[0] = cos(beta)*c;
	vc[1] = (cos(alpha) * b*c - vb[0]*vc[0]) / vb[1];
	vc[2] = sqrt(fabs(c^2 - vc[0]^2 - vc[1]^2));

	mat 3 3 A;
	A[0~2, 0] = va;
	A[0~2, 1] = vb;
	A[0~2, 2] = vc;

	ret A;
}


#
# length of a vector under a given metric
# @see (Arens 2015), p. 808
#
func scalar calc_len(mat 3 3 G, vec 3 v)
{
	ret sqrt(v * (G * v));
}


#
# angle between vectors under a given metric
# @see (Arens 2015), p. 808
#
func scalar calc_angle(mat 3 3 G, vec 3 v1, vec 3 v2)
{
	scalar d = v1 * (G * v2);
	scalar l1 = calc_len(G, v1);
	scalar l2 = calc_len(G, v2);

	ret acos(d / (l1*l2));
}


#
# levi-civita symbol in fractional coordinates
# @see (Arens 2015), p. 815
#
func scalar calc_levi(mat 3 3 B, int i, int j, int k)
{
	mat 3 3 M;
	M[0~2, 0] = B[0~2, i];
	M[0~2, 1] = B[0~2, j];
	M[0~2, 2] = B[0~2, k];

	ret |M|;
}


#
# v3_l = v1_j v2_k Ginv_li eps_ijk
# @see (Arens 2015), p. 815
#
func vec 3 calc_cross(mat 3 3 B, vec 3 v1, vec 3 v2)
{
	mat 3 3 G = B'*B;
	mat 3 3 G_inv = G^(-1);
	vec 3 v3;

	loop l = 0~2 do
	{
		v3[l] = 0;

		loop j = 0~2 do
		{
			loop k = 0~2 do
			{
				loop i = 0~2 do
					v3[l] = v3[l] + v1[j]*v2[k]*G_inv[l,i]*calc_levi(B, i,j,k);
			}
		}
	}

	ret v3;
}


func start()
{
	set_debug(0);
	set_eps(1e-5);
	putstr("eps = 10^(" + log10(get_eps()) + ")");

	scalar a = getflt("a = ");
	scalar b = getflt("b = ");
	scalar c = getflt("c = ");
	scalar alpha = getflt("alpha = ");
	scalar beta = getflt("beta = ");
	scalar gamma = getflt("gamma = ");

	alpha = alpha/180*pi;
	beta = beta/180*pi;
	gamma = gamma/180*pi;


	# own calculation
	mat 3 3 A = A_matrix(a,b,c, alpha,beta,gamma);
	mat 3 3 B = 2*pi*A'^(-1);
	putstr("A matrix: " + A);
	putstr("B matrix: " + B);

	# check
	mat 3 3 B2 = B_matrix(a,b,c, alpha,beta,gamma);
	if B2 <> B then
	{
		putstr("B matrix mismatch!");
		putstr("B matrix: " + B2);
		ret;
	}


	mat 3 3 G = B'*B;
	putstr("Metric tensor: " + G);

	vec 3 eval_re, eval_im;
	mat 3 3 evec_re, evec_im;
	assign eval_re, eval_im, evec_re, evec_im = eigenvecs(G);
	putstr("Metric tensor eigenvals: " + eval_re);
	putstr("Metric tensor eigenvecs (in columns): " + evec_re);
	#putstr(evec_re[0~2, 0]);


	vec 3 v100 = [1, 0, 0];
	vec 3 v010 = [0, 1, 0];
	vec 3 v001 = [0, 0, 1];
	vec 3 v110 = [1, 1, 0];
	vec 3 v111 = [1, 1, 1];

	scalar ang_100_010 = calc_angle(G, v100, v010);
	scalar ang_100_001 = calc_angle(G, v100, v001);
	scalar ang_010_001 = calc_angle(G, v010, v001);
	scalar ang_100_110 = calc_angle(G, v100, v110);
	scalar ang_100_101 = calc_angle(G, v100, v110);
	scalar ang_100_011 = calc_angle(G, v100, v110);
	scalar ang_100_111 = calc_angle(G, v100, v111);

	putstr("Angle between [100] and [010]: " + (ang_100_010/pi*180) + " deg");
	putstr("Angle between [100] and [001]: " + (ang_100_001/pi*180) + " deg");
	putstr("Angle between [010] and [001]: " + (ang_010_001/pi*180) + " deg");
	putstr("Angle between [100] and [110]: " + (ang_100_110/pi*180) + " deg");
	putstr("Angle between [100] and [101]: " + (ang_100_101/pi*180) + " deg");
	putstr("Angle between [100] and [011]: " + (ang_100_011/pi*180) + " deg");
	putstr("Angle between [100] and [111]: " + (ang_100_111/pi*180) + " deg");

#	putstr(calc_cross(B, v100, v010));
}
